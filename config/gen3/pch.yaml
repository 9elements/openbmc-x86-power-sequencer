---

# Contains a list of units. Every unit contains logic (similar to a LUT in a
# CPLD).
# Units contain AND gates and OR gates. The order of AND and OR gates is
# controled by 'and_then_or' flag. Every input can be inverted.
# If the inputs need to be stable and logical '1' for a specific amount of time
# specify 'input_stable_usec'. If the input is not stable or logical '0' the
# result is '0'.
# If the first gate is AND and 'invert_first_gate' is set, it acts like a NAND
# gate.
# If the first gate is OR and 'invert_first_gate' is set, it acts like a NOR
# gate.
# Specify 'delay_usec' to delay the output signal by usec.

inputs:
  - name: "FM_SLPS3_N"
    type: "gpio"
    signal_name: "FM_SLPS3_N"
    active_low: true
    description: "Indicates that the PCH is in ACPI S3."
  - name: "FM_SLPS4_N"
    type: "gpio"
    signal_name: "FM_SLPS4_N"
    active_low: true
    description: "Indicates that the PCH is in ACPI S4 or S5."
  - name: "RST_RTCRST_N"
    signal_name: "RTCRST_N"
    type: "gpio"
    active_low: true
    description: >
      RTC well reset. With RTC battery installed should never be asserted.
      Without RTC battery asserted when in G3.

outputs:
  - name: "PWRGD_PCH_DPWROK"
    type: "gpio"
    signal_name: "DSW_PWROK"
    description: >
      PCH core power good for at least 10msec. Min 1 usec after RTCRST_N
  - name: "PWRGD_PCH_PWROK"
    type: "gpio"
    signal_name: "PCH_PWROK"
    description: "PCH core power good for at least 10msec."
    comment: "!FM_SLPS3_N && PCH_PWR_EN && !FAULT"
  - name: "RST_PCH_RSMRST_R_N"
    type: "gpio"
    signal_name: "RSMRST_N"
    description: >
      All PCH primary power rails are stable for 10 msec.
      Either assert after SLP_SUS_N or 100msec after DSW_PWROK assertion.

power_sequencer:
  - DSW_PWRGD_Unit:
      in:
        and:
          - name: "RTCRST_N"
          - name: "P3V3_PCH_PowerGood"
            input_stable_usec: 10000 # EBG:BT2
          - name: "P3V3_PCH_PowerGood"
      out:
        name: "DSW_PWROK"

  - P1V8_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "P3V3_PCH_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "P3V3_PCH_PowerGood"
      out:
        name: "P1V8_PCH_AUX_On"

  - PVNN_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "P1V8_PCH_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "P1V8_PCH_AUX_PowerGood"
      out:
        name: "PVNN_PCH_AUX_On"

  - P1V05_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "PVNN_PCH_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "PVNN_PCH_AUX_PowerGood"
      out:
        active_low: false
        name: "P1V05_PCH_AUX_On"

  - RSMRST_Unit:  # When high then AUX power is on and system is in S5, else G3
      in:
        and:
          - name: "P1V05_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V05_PCH_AUX_PowerGood"
          - name: "P1V8_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V8_PCH_AUX_PowerGood"
          - name: "PVNN_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "PVNN_PCH_AUX_PowerGood"
          - name: "P1V05_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V05_PCH_AUX_PowerGood"
          - name: "P3V3_PCH_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P3V3_PCH_PowerGood"
      out:
        active_low: false
        name: "RSMRST_N"

  # P3V3 provides AUX power to PCH as well. Always drive it when not in G3
  - P3V3_Unit:
      in:
        and:
          - name: "RTCRST_N"
          - name: "ACPI_STATE_REQ_G3"
            invert: true
      out:
        name: "P3V3_PCH_On"

  # Wait 10msec after Vcc_main is stable.
  # Vcc_main is the same as AUX. AUX is already powered if RSMRST is asserted.
  # The only PCIe device is the BMC and it's already powered.
  # Vcc_main must be stable for 100usec or longer after PCH_PWROK goes low.
  - PCH_PWROK_Unit:
      in:
        and:
          - name: "FM_SLPS4_N"
            invert: true
          - name: "RSMRST_N"
      out:
        name: "PCH_PWROK"
      delay_us: 100

regulators:
  - name: "P3V3_PCH"
  - name: "P1V8_PCH_AUX"
  - name: "P1V05_PCH_AUX"
  - name: "PVNN_PCH_AUX"