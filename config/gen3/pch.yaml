---

# Contains a list of units. Every unit contains logic (similar to a LUT in a
# CPLD).
# Units contain AND gates and OR gates. The order of AND and OR gates is
# controled by 'and_then_or' flag. Every input can be inverted.
# If the inputs need to be stable and logical '1' for a specific amount of time
# specify 'input_stable_usec'. If the input is not stable or logical '0' the
# result is '0'.
# If the first gate is AND and 'invert_first_gate' is set, it acts like a NAND
# gate.
# If the first gate is OR and 'invert_first_gate' is set, it acts like a NOR
# gate.
# Specify 'delay_usec' to delay the output signal by usec.

power_sequencer:
  - DSW_PWRGD_Unit:
      in:
        and:
          - name: "RTCRST_N"
          - name: "P3V3_PCH_PowerGood"
            input_stable_usec: 10000 # EBG:BT2
          - name: "P3V3_PCH_PowerGood"
      out:
        name: "DSW_PWROK"

  - P1V8_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "P3V3_PCH_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "P3V3_PCH_PowerGood"
      out:
        name: "P1V8_PCH_AUX_On"

  - PVNN_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "P1V8_PCH_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "P1V8_PCH_AUX_PowerGood"
      out:
        name: "PVNN_PCH_AUX_On"

  - P1V05_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "PVNN_PCH_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
          - name: "PVNN_PCH_AUX_PowerGood"
      out:
        active_low: false
        name: "P1V05_PCH_AUX_On"

  - RSMRST_Unit:  # When high then AUX power is on and system is in S5, else G3
      in:
        and:
          - name: "P1V05_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V05_PCH_AUX_PowerGood"
          - name: "P1V8_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V8_PCH_AUX_PowerGood"
          - name: "PVNN_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "PVNN_PCH_AUX_PowerGood"
          - name: "P1V05_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V05_PCH_AUX_PowerGood"
          - name: "P3V3_PCH_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P3V3_PCH_PowerGood"
      out:
        active_low: false
        name: "RSMRST_N"

  # P3V3 provides AUX power to PCH as well. Always drive it when not in G3
  - P3V3_Unit:
      in:
        and:
          - name: "RTCRST_N"
          - name: "ACPI_STATE_REQ_G3"
            invert: true
      out:
        name: "P3V3_PCH_On"

  # Wait 10msec after Vcc_main is stable.
  # Vcc_main is the same as AUX. AUX is already powered if RSMRST is asserted.
  # The only PCIe device is the BMC and it's already powered.
  # Vcc_main must be stable for 100usec or longer after PCH_PWROK goes low.
  - PCH_PWROK_Unit:
      in:
        and:
          - name: "FM_SLPS4_N"
            invert: true
          - name: "RSMRST_N"
      out:
        name: "PCH_PWROK"
      delay_us: 100


  # Collect platform wide VR state. Required for SYS_PWROK.
  - AUX_VR_Off_Unit:
      in:
        and:
          - name: "P1V8_PCH_AUX_Enabled"
            invert: true
          - name: "PVNN_PCH_AUX_Enabled"
            invert: true
          - name: "P1V05_PCH_AUX_Enabled"
            invert: true
          - name: "RSMRST_Unit"
            invert: true
      out:
        name: "AUX_VR_Off"

  - PCH_Off_Unit:
      in:
        and:
          - name: "FM_SLPS4_N"
            invert: true # FIXME invert/ active low ???
          - name: "FM_SLPS3_N"
            invert: true
          - name: "PCH_PWROK"
            invert: true
          - name: "SYS_PWROK"
            invert: true
      out:
        name: "PCH_Off"

  - CPU_VR_Off_Unit:
      in:
        and:
          - name: "CPU0_VR_Off"
            input_stable_usec: 100
          - name: "CPU1_VR_Off"
            input_stable_usec: 100
          - name: "CPU2_VR_Off"
            input_stable_usec: 100
          - name: "CPU3_VR_Off"
            input_stable_usec: 100
          - name: "SYS_PWROK"
            invert: true
      out:
        name: "CPU_VR_Off"

  - DDR_VR_Off_Unit:
      in:
        and:
          - name: "CPU0_DDR_Off"
            input_stable_usec: 100
          - name: "CPU1_DDR_Off"
            input_stable_usec: 100
          - name: "CPU2_DDR_Off"
            input_stable_usec: 100
          - name: "CPU3_DDR_Off"
            input_stable_usec: 100
      out:
        name: "DDR_VR_Off"
  # latch SYS_PWROK 100usec after PWRGD_CPUPWRGD goes high
  - SYS_PWROK_After_CPUPWRGD_Unit:
      in:
        and:
          - name: "SYS_PWROK_Internal"
          - name: "PWRGD_CPUPWRGD"
            input_stable_usec: 100
          - name: "PWRGD_CPUPWRGD"
      out:
        name: "SYS_PWROK_After_CPUPWRGD"
  
  # ignore SYS_PWROK_After_CPUPWRGD once SYS_PWROK is high
  - SYS_PWROK_Out_Unit:
      in:
        and:
          - name: "SYS_PWROK"
          - name: "SYS_PWROK_Internal"
        or:
          - name: "SYS_PWROK_After_CPUPWRGD"
        and_then_or: true
      out:
        name: "SYS_PWROK"

  # SYS_PWROK is an indication that *ALL* VRs are running fault free.
  # SYS_PWROK must latch after PWRGD_CPUPWRGD goes high.
  # PWRGD_CPUPWRGD is not an input of SYS_PWROK!
  - SYS_PWROK_Unit:
      in:
        and:
          # Driving SYS_PWROK low at runtime will cause immediately power off
          - name: "ACPI_STATE_REQ_G3"
            invert: true
          - name: "ACPI_STATE_REQ_S5"
            invert: true
          - name: "RST_PCH_RSMRST_R_N"
          - name: "DSW_PWROK"
          - name: "PCH_PWROK"
          - name: "CPU_POWER"
          - name: "DDR_POWER"
          - name: "CPU_VR_PWRGD"
          - name: "CPU_DDR_PWRGD"
      out:
        name: "SYS_PWROK_Internal"

  # Detect current ACPI state
  - ACPI_STATE_IS_G3_Unit:
      in:
        and:
          - name: "AUX_VR_Off"
          - name: "PCH_Off"
          - name: "CPU_VR_Off"
          - name: "DDR_VR_Off"
      out:
        name: "ACPI_STATE_IS_G3"

  - ACPI_STATE_IS_S5_Unit:
      in:
        and:
          - name: "DSW_PWROK"
          - name: "RSMRST_N"
          - name: "PCH_Off"
          - name: "CPU_VR_Off"
          - name: "DDR_VR_Off"
      out:
        name: "ACPI_STATE_IS_S5"

  - ACPI_STATE_IS_S0_Unit:
      in:
        and:
          - name: "DSW_PWROK"
          - name: "RSMRST_N"
          - name: "CPU_DDR_PWRGD"
          - name: "CPU_VR_PWRGD"
          - name: "PCH_PWROK"
          - name: "SYS_PWROK"
          - name: "PWRGD_CPUPWRGD"
          - name: "PLTRST_N"
          - name: "FM_SLPS4_N"
          - name: "FM_SLPS3_N"
      out:
        name: "ACPI_STATE_IS_S0"

immutables:
  - ACPI_STATE_IS_S3:
    signal_name: "ACPI_STATE_IS_S3"
    value: false
  - ACPI_STATE_IS_S4:
    signal_name: "ACPI_STATE_IS_S4"
    value: false
