---

# Contains a list of units. Every unit contains logic (similar to a LUT in a
# CPLD).
# Units contain AND gates and OR gates. The order of AND and OR gates is
# controled by 'and_then_or' flag. Every input can be inverted.
# If the inputs need to be stable and logical '1' for a specific amount of time
# specify 'input_stable_usec'. If the input is not stable or logical '0' the
# result is '0'.
# If the first gate is AND and 'invert_first_gate' is set, it acts like a NAND
# gate.
# If the first gate is OR and 'invert_first_gate' is set, it acts like a NOR
# gate.
# Specify 'delay_usec' to delay the output signal by usec.

power_sequencer:
  - AUX_VR_Off_Unit:
      in:
        and:
          - name: "P3V3_AUX_Enabled"
            invert: true
          - name: "P1V8_PCH_AUX_Enabled"
            invert: true
          - name: "PVNN_PCH_AUX_Enabled"
            invert: true
          - name: "P1V05_PCH_AUX_Enabled"
            invert: true
          - name: "RSMRST_Unit"
            invert: true
      out:
        name: "AUX_VR_Off"

  - PCH_Off_Unit:
      in:
        and:
          - name: "FM_SLPS4_N"
            invert: true # FIXME invert/ active low ???
          - name: "FM_SLPS3_N"
            invert: true
          - name: "PCH_PWROK"
            invert: true
          - name: "SYS_PWROK"
            invert: true
      out:
        name: "PCH_Off"

  - CPU_VR_Off_Unit:
      in:
        and:
          - name: "PVCCIO_CPU0_Enabled"
            invert: true
          - name: "PVCCIO_CPU1_Enabled"
            invert: true
          - name: "PVCCIO_CPU2_Enabled"
            invert: true
          - name: "PVCCIO_CPU3_Enabled"
            invert: true
          - name: "CPU_VR_PWRGD"
            invert: true
          - name: "SYS_PWROK"
            invert: true
      out:
        name: "CPU_VR_Off"

  - DDR_VR_Off_Unit:
      in:
        and:
          - name: "PVPP_ABC_Enabled"
            invert: true
          - name: "PVPP_DEF_Enabled"
            invert: true
          - name: "PVPP_GHJ_Enabled"
            invert: true
          - name: "PVPP_KLM_Enabled"
            invert: true
          - name: "PVPP_NPQ_Enabled"
            invert: true
          - name: "PVPP_RST_Enabled"
            invert: true
          - name: "PVPP_UVW_Enabled"
            invert: true
          - name: "PVPP_XYZ_Enabled"
            invert: true
          - name: "CPU_DDR_PWRGD"
            invert: true
      out:
        name: "DDR_VR_Off"

  - P3V3_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_G3"
            invert: true
          - name: "RTCRST_N"
            input_stable_usec: 9000
      out:
        name: "P3V3_AUX_On"

  - P3V3_AUX_Delay_Unit:
      in:
        and:
          - name: "P3V3_AUX_On"
            input_stable_usec: 1000 #FIXME
      out:
          name: "P3V3_AUX_On"

  # VCCPDSW_3P3 is connected to P3V3_PCH, which is controled by AUX_SSB_3V3 and
  # produced by P3V3_AUX
  - DSW_PWRGD_Unit:
      in:
        and:
          - name: "RTCRST_N"
          - name: "AUX_SSB_3V3_PowerGood"
            input_stable_usec: 10000 # EBG:BT2
      out:
        name: "DSW_PWROK"

  # P5V_AUX_On is on by default

  - P1V8_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_G3"
            invert: true
          - name: "P3V3_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
      out:
        name: "P1V8_PCH_AUX_On"

  - PVNN_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_G3"
            invert: true
          - name: "P1V8_PCH_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
      out:
        name: "PVNN_PCH_AUX_On"

  - P1V05_PCH_AUX_Unit:
      in:
        and:
          - name: "ACPI_STATE_G3"
            invert: true
          - name: "PVNN_PCH_AUX_PowerGood"
            input_stable_usec: 100  # EGB: min 2 usec
      out:
        active_low: false
        name: "P1V05_PCH_AUX_On"

  - RSMRST_Unit:  # When high then AUX power is on and system is in S5, else G3
      in:
        and:
          - name: "P1V05_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V8_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "PVNN_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "P1V05_PCH_AUX_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
          - name: "AUX_SSB_3V3_PowerGood"
            input_stable_usec: 10000  # LBG: min 10 msec
      out:
        active_low: false
        name: "RSMRST_N"

  # P3V3 provides AUX power to PCH as well
  - P3V3_Unit:
      in:
        and:
          - name: "P3V3_AUX_PowerGood"
      out:
        name: "AUX_SSB_3V3_On"

  # Wait 10msec after Vcc_main is stable.
  # Vcc_main is the same as AUX. AUX is already powered if RSMRST is asserted.
  # The only PCIe device is the BMC and it's already powered.
  # Vcc_main must be stable for 100usec or longer after PCH_PWROK goes low.
  - PCH_PWROK_Unit:
      in:
        and:
          - name: "FM_SLPS4_N"
            invert: true
          - name: "RSMRST_Unit"
      out:
        name: "PCH_PWROK"
      delay_us: 100

  # latch SYS_PWROK 100usec after PWRGD_CPUPWRGD goes high
  - SYS_PWROK_After_CPUPWRGD_Unit:
      in:
        and:
          - name: "SYS_PWROK_Internal"
          - name: "PWRGD_CPUPWRGD"
            input_stable_usec: 100
      out:
        name: "SYS_PWROK_After_CPUPWRGD"
  
  # ignore SYS_PWROK_After_CPUPWRGD once SYS_PWROK is high
  - SYS_PWROK_Out_Unit:
      in:
        and:
          - name: "SYS_PWROK"
          - name: "SYS_PWROK_Internal"
        or:
          - name: "SYS_PWROK_After_CPUPWRGD"
        and_then_or: true
      out:
        name: "SYS_PWROK"

  # SYS_PWROK is an indication that *ALL* VRs are running fault free.
  # SYS_PWROK must latch after PWRGD_CPUPWRGD goes high.
  # PWRGD_CPUPWRGD is not an input of SYS_PWROK!
  - SYS_PWROK_Unit:
      in:
        and:
          - name: "RST_PCH_RSMRST_R_N"
          - name: "DSW_PWROK"
      out:
        name: "SYS_PWROK_Internal"
